// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Người dùng và xác thực
model User {
  id                BigInt      @id @default(autoincrement())
  email             String      @unique @db.VarChar(191)
  passwordHash      String?     @map("password_hash") @db.VarChar(255)
  fullName          String      @map("full_name") @db.VarChar(191)
  phone             String?     @db.VarChar(32)
  avatarUrl         String?     @map("avatar_url") @db.VarChar(255)
  role              UserRole    @default(customer)
  provider          AuthProvider @default(local)
  providerId        String?     @map("provider_id") @db.VarChar(191)
  emailVerifiedAt   DateTime?   @map("email_verified_at")
  createdAt         DateTime    @map("created_at") @default(now())
  updatedAt         DateTime    @map("updated_at") @updatedAt

  // Relations
  addresses         Address[]
  cart              Cart?
  wishlist          Wishlist?
  orders            Order[]
  reviews           Review[]
  passwordResetTokens PasswordResetToken[]

  @@map("users")
  @@index([email])
}

model PasswordResetToken {
  id        BigInt   @id @default(autoincrement())
  userId    BigInt   @map("user_id")
  token     String   @unique @db.VarChar(255)
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @map("created_at") @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

model Address {
  id            BigInt   @id @default(autoincrement())
  userId        BigInt   @map("user_id")
  recipientName String   @map("recipient_name") @db.VarChar(191)
  phone         String   @db.VarChar(32)
  province      String   @db.VarChar(191)
  district      String   @db.VarChar(191)
  ward          String   @db.VarChar(191)
  addressLine   String   @map("address_line") @db.VarChar(255)
  isDefault     Boolean  @map("is_default") @default(false)
  createdAt     DateTime @map("created_at") @default(now())
  updatedAt     DateTime @map("updated_at") @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
  @@index([userId])
}

// Danh mục và sản phẩm
model Category {
  id          BigInt    @id @default(autoincrement())
  parentId    BigInt?   @map("parent_id")
  name        String    @db.VarChar(191)
  slug        String    @unique @db.VarChar(191)
  description String?
  isActive    Boolean   @default(true) @map("is_active")
  position    Int       @default(0)

  // Relations
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  children Category[] @relation("CategoryHierarchy")
  products Product[]

  @@map("categories")
  @@index([parentId])
}

model Product {
  id          BigInt   @id @default(autoincrement())
  categoryId  BigInt?  @map("category_id")
  name        String   @db.VarChar(191)
  slug        String   @unique @db.VarChar(191)
  sku         String?  @db.VarChar(64)
  description String?
  origin      String?  @db.VarChar(191)
  isActive    Boolean  @map("is_active") @default(true)
  createdAt   DateTime @map("created_at") @default(now())
  updatedAt   DateTime @map("updated_at") @updatedAt

  // Relations
  category       Category?         @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  images         ProductImage[]
  variants       ProductVariant[]
  cartItems      CartItem[]
  wishlistItems  WishlistItem[]
  orderItems     OrderItem[]
  reviews        Review[]

  @@map("products")
  @@index([categoryId])
}

model ProductImage {
  id        BigInt @id @default(autoincrement())
  productId BigInt @map("product_id")
  imageUrl  String @map("image_url") @db.VarChar(255)
  position  Int    @default(0)

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
  @@index([productId])
}

model ProductVariant {
  id             BigInt  @id @default(autoincrement())
  productId      BigInt  @map("product_id")
  variantName    String  @map("variant_name") @db.VarChar(191)
  unitLabel      String? @map("unit_label") @db.VarChar(64)
  price          Decimal @db.Decimal(12, 2)
  compareAtPrice Decimal? @map("compare_at_price") @db.Decimal(12, 2)
  stockQuantity  Int     @map("stock_quantity") @default(0)
  isActive       Boolean @map("is_active") @default(true)

  // Relations
  product     Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  cartItems   CartItem[]
  wishlistItems WishlistItem[]
  orderItems  OrderItem[]

  @@map("product_variants")
  @@index([productId])
}

// Giỏ hàng và yêu thích
model Cart {
  id        BigInt   @id @default(autoincrement())
  userId    BigInt?  @map("user_id")
  sessionId String?  @map("session_id") @db.VarChar(191)
  createdAt DateTime @map("created_at") @default(now())
  updatedAt DateTime @map("updated_at") @updatedAt

  // Relations
  user  User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  items CartItem[]

  @@map("carts")
  @@unique([userId])
  @@index([userId])
  @@index([sessionId])
}

model CartItem {
  id                BigInt  @id @default(autoincrement())
  cartId            BigInt  @map("cart_id")
  productId         BigInt  @map("product_id")
  variantId         BigInt? @map("variant_id")
  quantity          Int
  unitPriceSnapshot Decimal @map("unit_price_snapshot") @db.Decimal(12, 2)

  // Relations
  cart    Cart           @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product        @relation(fields: [productId], references: [id], onDelete: Restrict)
  variant ProductVariant? @relation(fields: [variantId], references: [id], onDelete: SetNull)

  @@map("cart_items")
  @@index([cartId])
}

model Wishlist {
  id        BigInt   @id @default(autoincrement())
  userId    BigInt   @map("user_id") @unique
  createdAt DateTime @map("created_at") @default(now())

  // Relations
  user  User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items WishlistItem[]

  @@map("wishlists")
}

model WishlistItem {
  id         BigInt   @id @default(autoincrement())
  wishlistId BigInt   @map("wishlist_id")
  productId  BigInt   @map("product_id")
  variantId  BigInt?  @map("variant_id")
  createdAt  DateTime @map("created_at") @default(now())

  // Relations
  wishlist Wishlist       @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  product  Product        @relation(fields: [productId], references: [id], onDelete: Restrict)
  variant  ProductVariant? @relation(fields: [variantId], references: [id], onDelete: SetNull)

  @@unique([wishlistId, productId, variantId])
  @@map("wishlist_items")
}

// Mã giảm giá
model Coupon {
  id                BigInt      @id @default(autoincrement())
  code              String      @unique @db.VarChar(64)
  type              CouponType
  value             Decimal     @db.Decimal(12, 2)
  minOrderAmount    Decimal?    @map("min_order_amount") @db.Decimal(12, 2)
  maxDiscountAmount Decimal?    @map("max_discount_amount") @db.Decimal(12, 2)
  usageLimit        Int?        @map("usage_limit")
  usedCount         Int         @map("used_count") @default(0)
  startsAt          DateTime?   @map("starts_at")
  endsAt            DateTime?   @map("ends_at")
  isActive          Boolean     @map("is_active") @default(true)
  createdAt         DateTime    @map("created_at") @default(now())
  updatedAt         DateTime    @map("updated_at") @updatedAt

  @@map("coupons")
}

// Đơn hàng
model Order {
  id                      BigInt        @id @default(autoincrement())
  orderCode               String        @map("order_code") @unique @db.VarChar(32)
  userId                  BigInt?       @map("user_id")
  status                  OrderStatus   @default(PENDING)
  paymentStatus           OrderPaymentStatus @map("payment_status") @default(UNPAID)
  paymentMethod           PaymentMethod @map("payment_method") @default(VNPAY)
  subtotalAmount          Decimal       @map("subtotal_amount") @default(0) @db.Decimal(12, 2)
  discountAmount          Decimal       @map("discount_amount") @default(0) @db.Decimal(12, 2)
  shippingFee             Decimal       @map("shipping_fee") @default(0) @db.Decimal(12, 2)
  totalAmount             Decimal       @map("total_amount") @default(0) @db.Decimal(12, 2)
  shippingAddressSnapshot Json?         @map("shipping_address_snapshot")
  notes                   String?
  createdAt               DateTime      @map("created_at") @default(now())
  updatedAt               DateTime      @map("updated_at") @updatedAt

  // Relations
  user     User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  items    OrderItem[]
  payment  Payment?
  reviews  Review[]

  @@map("orders")
  @@index([userId])
}

model OrderItem {
  id          BigInt  @id @default(autoincrement())
  orderId     BigInt  @map("order_id")
  productId   BigInt  @map("product_id")
  variantId   BigInt? @map("variant_id")
  productName String  @map("product_name") @db.VarChar(191)
  variantName String? @map("variant_name") @db.VarChar(191)
  sku         String? @db.VarChar(64)
  quantity    Int
  unitPrice   Decimal @map("unit_price") @db.Decimal(12, 2)
  totalPrice  Decimal @map("total_price") @db.Decimal(12, 2)

  // Relations
  order   Order            @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product          @relation(fields: [productId], references: [id], onDelete: Restrict)
  variant ProductVariant?  @relation(fields: [variantId], references: [id], onDelete: SetNull)

  @@map("order_items")
  @@index([orderId])
}

// Thanh toán
model Payment {
  id        BigInt        @id @default(autoincrement())
  orderId  BigInt      @map("order_id") @unique
  provider PaymentProvider @default(VNPAY)
  amount   Decimal     @db.Decimal(12, 2)
  currency String      @default("VND") @db.Char(3)
  status   PaymentStatus @default(PENDING)
  paidAt   DateTime?   @map("paid_at")
  createdAt DateTime   @map("created_at") @default(now())
  updatedAt DateTime   @map("updated_at") @updatedAt

  // Relations
  order           Order              @relation(fields: [orderId], references: [id], onDelete: Cascade)
  vnpayTransactions VnpayTransaction[]

  @@map("payments")
}

model VnpayTransaction {
  id                BigInt   @id @default(autoincrement())
  paymentId         BigInt   @map("payment_id")
  vnpTxnRef         String   @map("vnp_TxnRef") @db.VarChar(64)
  vnpTransactionNo   String?  @map("vnp_TransactionNo") @db.VarChar(64)
  vnpAmount         BigInt?  @map("vnp_Amount")
  vnpBankCode       String?  @map("vnp_BankCode") @db.VarChar(32)
  vnpResponseCode   String?  @map("vnp_ResponseCode") @db.VarChar(16)
  vnpOrderInfo      String?  @map("vnp_OrderInfo") @db.VarChar(255)
  vnpPayDate        String?  @map("vnp_PayDate") @db.VarChar(14)
  vnpSecureHash     String?  @map("vnp_SecureHash") @db.VarChar(255)
  returnParamsRaw   String?  @map("return_params_raw")
  ipnParamsRaw      String?  @map("ipn_params_raw")
  createdAt         DateTime @map("created_at") @default(now())

  // Relations
  payment Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  @@map("vnpay_transactions")
  @@index([paymentId])
  @@index([vnpTxnRef])
}

// Đánh giá
model Review {
  id         BigInt   @id @default(autoincrement())
  userId     BigInt   @map("user_id")
  productId  BigInt   @map("product_id")
  orderId    BigInt?  @map("order_id")
  rating     Int      @db.TinyInt
  comment    String?
  imagesJson Json?    @map("images_json")
  isApproved Boolean  @map("is_approved") @default(false)
  createdAt  DateTime @map("created_at") @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  order   Order?  @relation(fields: [orderId], references: [id], onDelete: SetNull)

  @@map("reviews")
  @@index([productId])
  @@index([userId])
}

// Cài đặt hệ thống
model Setting {
  key       String   @id @db.VarChar(128)
  value     String
  updatedAt DateTime @map("updated_at") @updatedAt

  @@map("settings")
}

// Enums
enum UserRole {
  customer
  admin
}

enum AuthProvider {
  local
  google
}

enum CouponType {
  PERCENT
  FIXED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  SHIPPING
  COMPLETED
  CANCELLED
  REFUNDED
}

enum OrderPaymentStatus {
  UNPAID
  PAID
  FAILED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}

enum PaymentMethod {
  COD
  VNPAY
}

enum PaymentProvider {
  VNPAY
  COD
}
